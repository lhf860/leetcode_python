# coding: utf-8


"""

问题描述：
    给定m个非负整数k1、k2...km， 每个数代表坐标中的一个点(i, ki)。在坐标内绘制m条垂直线，垂直线i的两个端点分别为(i,ki)和(i,0)。找出其中的两条线，使它们与x轴共同构成的容器可以容纳最多的水。
    容器不允许被摇晃，且m值至少为2.

example:

输入: [1, 8, 6, 2, 5, 4, 8, 3, 7]
输出： 49

"""


"""

思路解析：

   一个容器的最终盛水量和两个因素有关： 1）左右两个边界中比较短的那一个高度； 2）容器左右边界之间的距离，找到二者乘积的最大值就得出了本题目的结果。
   

变量定义：
height: 表示输入的高度数组
left: 表示容器的左边界的高度，最初指向数组的第一个元素
right: 表示容器的右边界的高度，最初指向数组的最后一个元素
res: 表示最终返回的最大盛水量，res的初始值为0

指针的移动规则：
   不管左指针和右指针只要向中间移动就会是容器的宽度变小，除非容器的高度增大才会有可能使得二者的乘积--容器的盛水量增大
   所以指针的移动方式： 移动指向较短边界的指针，只有移动这个指针才有可能使容器的容量增大，终止条件时左右指针相遇，并且在移动过程中要不断更新最大盛水量res变量。

"""


def max_area(height):

    res = 0
    left = 0
    right = len(height) - 1
    while left < right:

        res = max(res, min(height[left], height[right] * (right - left)))
        if height[left] < height[right]:
            left += 1
        else:
            right -= 1
    return res










